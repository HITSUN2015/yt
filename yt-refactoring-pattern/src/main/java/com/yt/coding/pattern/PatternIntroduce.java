package com.yt.coding.pattern;

/**
 * @author SUN
 * @create 2019-04-26 下午4:17
 * @desc
 *
 * 个人观念
 *
 * 我对设计模式的理解：
 * 大多数的业务逻辑，咱们自己用自己的代码，也能实现该功能，
 * 但为什么还需要设计模式那？而且能够被广泛推广应用？
 *
 * 我的理解：
 * 每种代码都有每种代码适合的需求情景
 * 而设计模式，汇总了大多数情境下，事务的发展规律，提供了大概率需要扩展的功能点的写法
 *
 * 所以我想强调的是
 * 1.不用设计模式，我们也可以实现业务逻辑
 * 2.套用设计模式时，一定要确定，他的扩展点，正是你当前业务的大概率扩展点
 *      ->解决过渡设计问题
 *      ->解决如何学习设计模式：
 *          1>学会，一般性的写法，别只会抄设计模式，一般性的写法一定是一针见血的简单，所以我给出了badDemo，这是最一般，不具扩展性的写法
 *          2>学会，设计模式，到底为哪个点，做出了扩展，你需要换位思考你的业务，在该点，将来是否也具备扩展性
 *          3>第一点是任何人一定能够学会的，就像学说话一样学写代码
 *            第二点却并没有一个绝对的衡量指标，所以引出了这里的第三点：
 *            如何从一般性的写法，重构出设计模式
 *
 * 最后 我希望我能把23种设计模式，抽象成类的交互，而非某种业务的抽象，化作写代码的过程里
 */
public interface PatternIntroduce {
}
